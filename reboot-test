#!/usr/bin/bash
###########################################################################
# $URL$
# $Author$
# $Date$
# $Rev$
###########################################################################

LOGBASE="/root/reboot-test"
PDSH="pdsh -t2 -u60"
#DRYRUN="echo"
DRYRUN=""

opt_logfile="${LOGBASE}/reboot-test.$(date +%s).log"

function setup_log {
	mkdir -p "$LOGBASE"
	echo "$(date --rfc-3339=seconds) $0: Start" > $opt_logfile || {
		echo "ERROR: Unable to create log file: $!"
		exit 1
	}
}
setup_log

function error {
	echo "$(date --rfc-3339=seconds) $0: ERROR $*" | tee -a $opt_logfile >&2 
}

function log {
	echo "$(date --rfc-3339=seconds) $0: $*" | tee -a $opt_logfile
}

if ! nodeattr primgmt ; then
	error "must be run from primgmt"
	exit 1
fi

if [ $(id -u) -ne 0 ]; then
	error "must be run as root"
	exit 1
fi

set -x


# Wait until the specified host(s) are 'up' per whatsup and multi-user.target was reached
# timeout is in seconds
function wait_for_hostlist_up {
	local funcname="wait_for_hostlist_up"
	local hostlist=$1
	local timeout=$2

	if [ -z "$hostlist" ]; then
		error "$funcname: missing argument hostlist"
		exit 2
	fi

	if [ -z "$timeout" ]; then
		error "$funcname: missing argument timeout"
		exit 2
	fi

	local start=$(date +%s)
	local end=$((start + timeout))

	log "$funcname: waiting for hosts $hostlist to come up"

	local are_at_multiuser=""
	local are_up=""
	local active_nodes=""
	while [ $(date +%s) -lt $end ]; do
		are_up=$(whatsup -u $hostlist)
		if [ "$are_up" = "$hostlist" ] ; then
			log "$funcname: whatsup reports all hosts up"
			break
		fi
		sleep 1
	done

	if [ $(date +%s) -lt $end ]; then
		log "$funcname: Checking status multiuser-target."

		while [ $(date +%s) -lt $end ]; do
			active_nodes=$($PDSH -w e${hostlist} systemctl is-active multi-user.target | grep -w active | dshbak -c | grep $(nodeattr -V -U cluster) )
			if [ "$active_nodes" = "" ]; then
				# all nodes down
				sleep 1
				continue
			fi

			    # pdsh uses the e-names
			if [ "e$hostlist" = "$active_nodes" ]; then
				are_at_multiuser="yes"
				break
			fi

			sleep 1
		done
	fi


	if [ "$are_at_multiuser" != "yes" ]; then
		log "$funcname: whatsup reports up: $(whatsup -u $hostlist)"
		log "$funcname: multi-user.target active nodes $active_nodes"
		error "$funcname: $hostlist not all at multi-user.target after $timeout seconds"
		exit 7
	else
		log "$funcname: nodes $active_nodes report multi-user.target active"
	fi
}


function reboot_nodes {
	local funcname="reboot_nodes"
	local nodelist=$1

	if [ -z "$nodelist" ]; then
		error "${funcname}: missing argument nodelist"
		exit 2
	fi

	log "${funcname}: powering off nodes $nodelist"
	$DRYRUN pm -0 $nodelist
	sleep 2
	if [ $(pm -q $nodelist | awk '/off:/ {print $NF}') != $nodelist ]; then
		$DRYRUN pm -0 $nodelist
		sleep 2
		if [ $(pm -q $nodelist | awk '/off:/ {print $NF}') != $nodelist ]; then
			error "${funcname}: failed to power off nodes $nodelist, proceed manually"
			$DRYRUN exit 2
		fi
	fi

	log "${funcname}: powering on all nodes"
	$DRYRUN pm -1 $nodelist
	sleep 2
	if [ $(pm -q $nodelist | awk '/on:/ {print $NF}') != $nodelist ]; then
		$DRYRUN pm -1 $nodelist
		sleep 2
		if [ $(pm -q $nodelist | awk '/on:/ {print $NF}') != $nodelist ]; then
			error "${funcname}: failed to power on nodes $nodelist, proceed manually"
			exit 2
		fi
	fi

	log "${funcname}: waiting for nodes to boot"
	sleep 180
	wait_for_hostlist_up $nodelist 600

	local badnode_count=$($PDSH -w e${nodelist} ls /etc/badnode 2>/dev/null | wc -l)

	if [ $badnode_count != 0 ]; then
		error "${funcname}: some rebooted nodes in $nodelist have badnode: $($PDSH -w e${nodelist} ls /etc/badnode 2>/dev/null)"
		exit 2
	fi
}


function summarize_status() {
	local funcname="summarize_status"

	echo ================================================
	echo Up/Down Nodes:
	log Nodes up: $(whatsup -u)
	log TOSS versions: $($PDSH -Av distro_version | dshbak -c | sed 's/---*//' | xargs)
	log Running kernel: $($PDSH -Av uname -r | dshbak -c |  sed 's/---*//' | xargs)
	log Lines in distro_diff: $($PDSH -Av 'distro_diff | wc -l' | dshbak -c |  sed 's/---*//' | xargs)
	echo ================================================
}

##
## Main
##

start_timestamp=$(date +%s)
log "start timestamp $start_timestamp"

# so our cwd doesn't disappear when we umount and restart
cd /root

nodelist=$(nodeattr -q oss)
reboot_nodes $desired $nodelist

wait_for_hostlist_up $nodelist 600

summarize_status $desired | less

log "end timestamp $(date +%s) duration $(( ($(date +%s) - start_timestamp)/60 )) minutes"

exit $exit_code
